{"pages":[{"title":"404 Not Found","text":"很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除 (不如看个广告压压惊吧) (adsbygoogle = window.adsbygoogle || []).push({});","link":"/404.html"},{"title":"关于我","text":"Every single moment is another chance to begin. About Name(with alias): Wittoy/Yavin/咕顾漓 Email(Base64): YUB3c2wucHVi Like チノ 音游党 水群 电子乐/欧美/ACG/车万同人曲/Avicii/ななひら Trance/Progressive/Dubstep/Synthwave/Hardcore Path Debian 10 &amp; Windows 10 &amp; Kali Linux RedMi K20 Pro &amp; LG V30 &amp; Google Pixel 4a Vercel &amp; Aliyun &amp; Baidu-Yunjiasu &amp; Tencent Cloud Blog History: [&gt;_Wittoy.log] Program: Hexo Theme: Icarus with Love. Licenses: 署名-非商业性使用-相同方式共享4.0 国际协议(CC BY-NC-SA 4.0) More 知识来源：沙雕网友 个人技能：Python/Nodejs/GoLang等语言的拼写 第一台服务器：AFFMAN的QuadraNet四大金刚之一 使用Hexo原因：没钱买服务器 摸鱼天下第一！！！ 目前项目：吃灰（114.514%）","link":"/about/index.html"},{"title":"镧·系统工具箱 - 黑域服务器","text":"这里是 镧·系统工具箱官网 - 黑域服务器 帮助与反馈页面 如果您想贡献自己的服务器，欢迎在此处或者在酷安私信 @Wittoy 或 @品如Senkin 目前站长服务器已从 2018.10.03 服务至今，累计提供服务共 10K 次（不完全统计）","link":"/brevent/index.html"},{"title":"友情链接","text":"欢迎互换友链，最好能按照友链格式在评论区留言喔 名称：Wittoy’s Blog（篱落闲栈）网址：https://blog.wittoy.com头像：https://cdn.jsdelivr.net/gh/1rz/static/images/me.jpg邮箱(可选)：YUB3c2wucHVi (Base64)标签：摸鱼天下第一 小伙伴们 Senventise’s Blog 一个没有妹妹的妹控 CWorld’s Blog 万物皆虚。万事皆允。 Ronnie's Blog 菜鸟两枚 Aicsukの世界 一个小小的博客 AzuSemisa’s Blog 一个OI蒟蒻的小窝 Dxe RBQ 我有乐趣 一个小透明Blog 颜兮之家 路漫漫其修远兮，吾将上下而求索","link":"/friends/index.html"},{"title":"&gt;_Wittoy.log","text":"2020 To Be Continued Oct. 升级 Hexo 5.0 , icarus 4.0 Jul. 更换域名 Jun. 域名备案成功 Mar. 改名为 篱落闲栈 Feb. 使用 icarus 主题 2019 Dec. 更换域名，博客改名为 云栈 Oct. 原域名过期，删库跑路 Jul. 使用 Volantis (Material X) 主题，全面采用静态托管 Apr. 使用 Hexo 2018 Apr. 博客诞生 使用 blog.martis.me 作为主域名，使用 Typecho 写作","link":"/history/index.html"},{"title":"胡言乱语","text":"var at = new Artitalk(); at.init({ appId: 'TR2Mq7trDxxH0HMVz4oQle5p-9Nh9j0Va', appKey: 'wdRsAX0TjGBHX4CjfNSpWLIz', serverURL: 'https://tab.leancloud.cn', color1: \"linear-gradient(90deg,rgba(247,149,51,.1) 0,rgba(243,112,85,.1) 15%,rgba(239,78,123,.1) 30%,rgba(161,102,171,.1) 44%,rgba(80,115,184,.1) 58%,rgba(16,152,173,.1) 72%,rgba(7,179,155,.1) 86%,rgba(109,186,130,.1) 100%)\", color2: \"linear-gradient(90deg,rgba(247,149,51,.1) 0,rgba(243,112,85,.1) 15%,rgba(239,78,123,.1) 30%,rgba(161,102,171,.1) 44%,rgba(80,115,184,.1) 58%,rgba(16,152,173,.1) 72%,rgba(7,179,155,.1) 86%,rgba(109,186,130,.1) 100%)\", color3: \"#5e5e5e\", atEmoji: { \"alu2\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/不出所料.png\", \"alu3\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/不说话.png\", \"alu4\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/不高兴.png\", \"alu5\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/中刀.png\", \"alu6\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/中指.png\", \"alu7\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/中枪.png\", \"alu8\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/亲亲.png\", \"alu9\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/便便.png\", \"alu10\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/内伤.png\", \"alu11\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/击掌.png\", \"alu12\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/口水.png\", \"alu13\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/吐.png\", \"alu14\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/吐舌.png\", \"alu15\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/吐血倒地.png\", \"alu16\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/呲牙.png\", \"alu17\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/咽气.png\", \"alu18\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/哭泣.png\", \"alu19\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/喜极而泣.png\", \"alu20\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/喷水.png\", \"alu21\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/喷血.png\", \"alu22\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/坐等.png\", \"alu23\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/害羞.png\", \"alu24\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/小眼睛.png\", \"alu25\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/尴尬.png\", \"alu26\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/得意.png\", \"alu27\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/惊喜.png\", \"alu28\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/想一想.png\", \"alu29\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/愤怒.png\", \"alu30\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/扇耳光.png\", \"alu31\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/投降.png\", \"alu32\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/抠鼻.png\", \"alu33\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/抽烟.png\", \"alu34\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/无奈.png\", \"alu35\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/无所谓.png\", \"alu36\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/无语.png\", \"alu37\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/暗地观察.png\", \"alu38\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/期待.png\", \"alu39\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/欢呼.png\", \"alu40\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/汗.png\", \"alu41\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/深思.png\", \"alu42\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/狂汗.png\", \"alu43\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/献花.png\", \"alu44\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/献黄瓜.png\", \"alu45\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/皱眉.png\", \"alu46\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/看不见.png\", \"alu47\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/看热闹.png\", \"alu48\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/瞅你.png\", \"alu49\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/肿包.png\", \"alu50\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/脸红.png\", \"alu51\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/蜡烛.png\", \"alu52\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/装大款.png\", \"alu53\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/观察.png\", \"alu54\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/赞一个.png\", \"alu55\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/邪恶.png\", \"alu56\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/锁眉.png\", \"alu57\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/长草.png\", \"alu58\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/阴暗.png\", \"alu59\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/高兴.png\", \"alu60\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/黑线.png\", \"alu61\": \"https://cdn.jsdelivr.net/gh/GamerNoTitle/ValineCDN@master/alu/鼓掌.png\" }, })","link":"/talk/index.html"}],"posts":[{"title":"解决Windows10无法搜索已安装软件","text":"我们遇到什么Bug，也不要怕，微笑着面对他，消除阿三留下的💩的最好办法就是面对Bug，坚持，才是胜利，加油，奥利给！！！ 软件安装后，大多都会在开始菜单中生成快捷方式，这样Windows Search便可以快捷地搜索到对应的软件。然鹅，在1809过渡到2004后，在我心目中懒人必备的软件搜索不管用了（ 坑1索引选项中包含了「开始」 菜单，但就是搜索不到已安装的软件？原因是默认索引选项包含的 “「开始」 菜单” 是 “李鬼” 。 这里的「开始」 菜单 只是 所有用户 下的开始菜单，不包括 个人用户 的开始菜单。Window 10对权限进行了改进，软件要想安装在 所有用户 下的话，必须要有管理员权限。 解决方法很简单，在索引选项中添加个人用户下的开始菜单。 索引选项 - 修改 - C盘 - 你的用户名 - AppData - Roaming - Microsoft Windows - 「开始」 菜单确定保存即可。 注：排除选项需取消AppData文件 坑2保存了，重建索引依旧搜不到？ 原因：好家伙，还能这么玩.jpg 解决方法打开 %APPDATA%\\Microsoft\\Windows 对 「开始」 菜单 右键 - 属性 - 高级 - 存档和索引属性 - 除了文件属性外，还允许索引此文件夹中文件的内容 然后再重建索引，即可回归Windows Search(bushi)","link":"/archives/win10-search/"},{"title":"ADGuard Home：自建去广告的安全DNS服务器","text":"在VPS上安装ADGuard Home，自建无广告，采用DoH/DoT协议的安全 DNS 服务器 前言家里的宽带是广电&amp;长宽，虽然二级宽带运营商不太建议改DNS，但面对乱七八糟的AD与劫持，电脑端倒可以通过浏览器插件屏蔽AD，手机端就拉闸了（此处@Chrome） 部分个人设备因无ROOT无法修改Hosts，且浏览器Chrome用习惯了。这边的漏油器是国内伪·御三家之一的高端大气上档次的低配普联，指望刷机装插件的路子没了。 考虑到安卓9的私人DNS功能，才发现可以用采用DoH/DoT协议且去广告的DNS来屏蔽花里胡哨的玩意儿。无奈硬件不给力，就只能用VPS安装ADGuard Home将就着用了。 安装网上一搜一大把的应该不用水了吧.jpg 1234wget https://static.adguard.com/adguardhome/release/AdGuardHome_linux_amd64.tar.gztar -xzvf AdGuardHome_linux_amd64.tar.gzcd AdGuardHome./AdGuardHome -s install 算了顺便水了一个Linux 64位一键懒人jio本wget -qO- https://cdn.wsl.pub/shell/ADGuard | sh 安装完成后，浏览器访问 http://你的服务器ip:3000 后进入ADGuard Home配置。 在 网页管理界面 中 监听接口 - 端口 改成非80，这边我设置的是3000端口，DNS 服务器 的 监听接口- 端口 理论上是53，但国内的政策是禁止个人用户自建DNS，所以自行考虑（ 用户名密码和设定并记住，跳过没人会看的设置指导后，登录到控制台。 设置DNS 设置可参考下面我的设置 上游 DNS 服务器12345tls://dns.google:853https://1.1.1.1/dns-querytls://1.1.1.1:853https://doh.pub/dns-querytls://dns.pub:853 Bootstrap DNS 服务器123223.5.5.5119.29.29.291.0.0.1 DNS服务设定速度限制0就行（基本上就你一个人用.jpg）如果 上游 DNS 服务器 设置的是国外DNS的话，这里推荐打开EDNS DNS缓存配置通常默认即可 配置DoH/DoT设置 - 加密设置 启动加密，服务器名称填写你的域名，全文以 dns.dns.dns 为例。 HTTPS端口设置成非 443 ，我这边的是 3443DNS-over-TLS 端口默认 853证书设置上，推荐acme.sh一套完事，也可以配合宝塔/Oneinstack/lnmp等面板的自动证书设置。 注：因为采用Nginx反向代理，故无须勾选HTTPS自动重定向 Nginx配置： 123456789101112131415161718192021222324252627282930313233343536373839server{ listen 80; server_name dns.dns.dns; # 填写对应域名 return 301 https://$host$request_uri;}server{ listen 443 ssl http2; server_name dns.dns.dns; # 填写对应域名 index index.html index.htm; # 证书路径配置 ssl_certificate /var/nginx/ssl/fullchain.pem; ssl_certificate_key /var/nginx/ssl/privkey.pem; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers off; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; error_page 497 https://$host$request_uri; location / { proxy_set_header Host $host; proxy_pass http://127.0.0.1:3000; } location /dns-query { proxy_http_version 1.1; proxy_buffering off; proxy_redirect off; proxy_set_header Host $host; proxy_pass https://dns.dns.dns:3443/dns-query; #填写对应域名，注意填写的是https以及后面的端口 } error_log /var/log/nginx/adguard_error.log;} 过滤规则过滤器 - DNS封锁清单自行添加规则，我这里用的是 Anti-AD ，基本上屏蔽了乱七八糟的广告 设备设定DNS安卓机：设置 - 网络 - 私人DNS 输入你的地址即可 电脑端: Chrome/Edge： 设置 - 隐私和安全性 - 安全性 - 进阶 - 使用安全DNS包含自订 输入你的地址即可 FireFox：选项 - 常规 - 网络设置 - 启用基于 HTTPS 的 DNS 自定义 输入你的地址即可 最终成果大概就这 常用命令12345678#启动systemctl start AdGuardHome#开机自启systemctl enable AdGuardHome#重启systemctl restart AdGuardHome#停止systemctl stop AdGuardHome 如果依旧无法使用，请检查端口是否监听/开放。","link":"/archives/adguard-home/"},{"title":"Ward：一个简约美观多系统支持的云监控","text":"介绍Ward是一个基于Java的简单且美观的服务器监视工具。支持暗色主题，多系统支持。其中监控内容有CPU，内存使用，硬盘使用，服务器运行时间等等。 Ward is a simple and and minimalistic server monitoring tool. Ward supports adaptive design system. Also it supports dark theme. It shows only principal information and can be used, if you want to see nice looking dashboard instead looking on bunch of numbers and graphs. Ward works nice on all popular operating systems, because it uses OSHI.https://github.com/B-Software/Ward#about 安装方式直接运行下载在 GitHub Release 下载已编译好的 jar 包。 配置Java JRE环境Debian JRE的安装步骤可参考我的 这篇文章 。Windows的话只能去 万恶的Oracle 下载了。 运行Linux：java -jar ward*.jarWindows：打开命令指示符(CMD)后，同样输入 java -jar ward-版本号.jar 成功运行后，访问 localhost:4000 后自行配置，其中 Application Port 设置除 4000 外的自定义端口。保存后访问你设置的自定义端口，即可食用。 附: Linux Systemd 配置 1234567891011121314151617mkdir /opt/Wardmv ward*.jar /opt/Ward/cat &gt; /etc/systemd/system/ward.service &lt;&lt;EOF[Unit]Description=WardAfter=network.target[Service]WorkingDirectory=/opt/WardExecStart=/usr/bin/java -jar ward.jarType=simpleRestart=on-failureRestartSec=5[Install]WantedBy=multi-user.targetEOF 启动&amp;开机自启： systemctl start wardsystemctl enable ward Docker构建运行123456git clone -b /opt/Ward-Docker https://github.com/B-Software/Ward.gitcd /opt/Ward-Dockerdocker build --tag warddocker run --rm -it --name ward -p 4000:4000 -p &lt;自定义端口&gt;:&lt;自定义端口&gt; --privileged ward# &lt;自定义端口&gt;中输入你将要访问的外网端口，如端口设置为5000：# docker run --rm -it --name ward -p 4000:4000 -p 5000:5000 --privileged ward 访问 localhost:4000 后，根据自己个人配置设置，其中 Application Port 设置成 刚才设置的自定义端口 。保存后访问你设置的自定义端口，即可食用。 自行编译安装克隆项目后。在IDE等软件中即可自定义编译后运行。","link":"/archives/ward/"},{"title":"CloudFlare Speed选项优化","text":"优化CloudFlare Rocket Loader与Browser Insights，加快网站加载速度（误）。 Rocket Loader介绍什么是 Rocket Loader？ Rocket Loader 会将您所有 JavaScript 的加载一直推迟到渲染之后再进行，从而优先处理您网站的内容（文本、图像、字体等）。在使用 JavaScript 的页面上，这可使您的用户获得更快加载的体验，并且可改善以下性能指标：首次渲染时间 (TTFP)首次内容渲染时间 (TTFCP)首次有效渲染时间 (TTFMP)文件加载https://support.cloudflare.com/hc/en-us/articles/200168056-What-does-Rocket-Loader-do 简单来说，就是延迟加载js。在页面加载时暂时注释js，先在页面中呈现其他资源（如CSS，图像等）。等到加载完成后，再去把js动态插回页面中，后浏览器加载完整页面。 听上去功能不错，能有效优化网站的加载速度。但实际上，在国内，首次加载这个12k的JS文件都够你怀疑人生一辈子了，更别说可能会导致某些JS无法正常运行，如Google Adsense等。 值得一提的是，百度云加速同样有此功能（JavaScript快速加载），得于国内百度云加速速度还算满意（总比CloudFlare强），这个功能还是值得开启的。附·开启方法：1.氪金 2.自定义规则 优化方案如果想让Rocket Loader不优化特定脚本，通过添加 data-cfasync=“false” 属性到相关js标签，即可让Rocket Loader忽略此js。 其中 'data-cfasync' 属性必须添加在 'src' 属性之前。 或者简单粗暴，直接关闭 Rocket Loader Browser Insights介绍 使用 Browser Insights 测量您的网站的性能和用户的加载时间。https://support.cloudflare.com/hc/en-us/articles/360033929991-Cloudflare-Browser-Insights 测量您的网站的性能和用户的加载时间，对于国内用户就是个没啥卵用的功能。加载这个功能的JS比打开CloudFlare官网还慢。 优化方案不多BB，直接关闭","link":"/archives/cloudflare-speed-options/"},{"title":"AllinSSL：免费申请泛域名通配符证书","text":"免费申请由AllinSSL提供的泛域名证书 虽然现在有各种各样的免费证书申请了，但免费的通配符证书这玩意儿还是很少见的，除去目前市场上的野卡AlphaSSL，估计就只有在AllinSSL里能方便快捷地白嫖双倍的通配符证书了（ 介绍 AllinSSL Co.Ltd面向全球提供公开信任的数字证书、网站安全服务, 拥有专业的PKI/CA安全技术服务团队, 专业程度质量值得信赖。 已经同全球知名权威证书颁发机构 Sectigo (Formerly Comodo CA) 达成授权合作, 专为亚太地区用户提供公开信任的数字证书。数字证书产品包含 多域名SSL证书、单域名SSL证书、通配符SSL证书 、企业OV SSL证书、国际认证EV SSL证书、公网IP地址证书、微软(Microsoft)软件代码证书、电子邮件签名证书、Adobe PDF电子签名证书等。https://allinssl.com/zh/page/about.html 其中可以白嫖的是3个月的通配符证书，分别是： CrazySSL Free Certificate 与 UbiquiTLS™ Free SSL 证书申请注册/登录AllinSSL 注册 或 登录 后，选择需要的SSL证书地址进行购买创建。 下文操作以创建CrazySSL证书为例。 创建证书csr可由系统自动生成，也可以手动上传生成的csr。 由于要申请的是泛域名证书，填写域名的时候要用通配符星号代替，如图片中的 *.wittoy.com 域名验证域名验证有文件验证、DNS验证、邮箱验证，根据方便程度自行选择验证方式。这里推荐文件验证，简单粗暴。 验证成功后保存提交，只须坐和放宽等待证书颁发。 下载证书颁发成功后根据自己服务器类型，下载对应的证书和密钥即可食用。 至此基本大功告成，Enjoy it.","link":"/archives/allinssl/"},{"title":"CloudFlare Spectrum SSH转发加速","text":"为你的被阻断/IPv6小鸡设置SSH中转转发加速 原来白嫖使用的是UCloud的GlobalSSH服务，但于 2020.05.19 后暂时只能添加UCloud的IP地址，然后想到CloudFlare最近推出的这个Spectrum服务。 Spectrum: security and acceleration for any TCP or UDP based application. That means you can route MQTT, email, file transfer, version control, games, anything over TCP or UDP through Cloudflare to mask the origin and protect it from DDoS.https://developers.cloudflare.com/spectrum “SPECTRUM — 比常规的CloudFlare多了65,533个端口，为所有应用提供 DDoS保护！” 服务器SSH又双叒叕断连辣？服务器被墙辣？买的NAT发现只有IPv6却不能裸连？通过全协议全端口的中转加速服务，均能有效解决以上问题。 温馨提示：Pro 和 Business套餐(包括Plesk CloudFlare插件)只支持SSH 、Minecraft协议(只能中转22/25565端口)，且每月只有5G免费流量。Enterprise套餐支持所有TCP/UDP协议，每月有10G免费流量。至于流量费嘛，1$/G（ Spectrum is available on all paid plans. Pro and Business support selected protocols only, whereas Enterprise supports all TCP and UDP based traffic. 以及中国大陆不可抗拒的速度方面，出口IP采用Anycast技术，但不包括中国.jpg所以和CF的线路差不多，电信联通走美西/欧洲，移动HKIX香港/李家坡。 These addresses are Anycasted from all Cloudflare data centers, with the exception of data centers in China. 食用步骤添加转发登录CloudFlare后，在域名控制台中依次 Spectrum - 创建应用程序 - SSH 其中应用程序域为子域名，按自己要求自行发挥，这里以 ssh.pearik.com 为例。IP地址为你的服务器地址，可以输入IPv4/IPv6。保存后按你的CloudFlare域名接入方式连接。 NS接入直接SSH连接到域 ssh.pearik.com ，即可食用。 CloudFlare Partner CNAME接入在你的DNS解析中 添加CNAME记录：域.cdn.cloudflare.net 如 ssh.pearik.com.cdn.cloudflare.net 后，SSH连接到域 ssh.pearik.com ，即可食用。 其他注意事项分配的IP为独享Anycast IP，所以不要去想用自选IP的方法去解析1.0.0.1/1.1.1.1了（ 同一个域名只允许一种转发类型，加钱我不知道。 可以利用白嫖的Plesk CloudFlare插件来白嫖此功能。 这个玩意还有更多骚操作，但请合理利用资源，不要逾越他本身的用途（参考UCloud），且存在流量限制，也就日常用用当做SSH转发了。 安全方面，这种端口全转发的公网中转，暂且不知道有无隐患。","link":"/archives/cloudflare-spectrum/"},{"title":"Coding文件网盘实现图床与文件直链下载","text":"Coding团队版无限空间文件网盘，实现文件高速直链下载与图床程序。 这篇文章咕了快有3个月了。起因还是某位傻逼网友 @Ronnie 在用Coding搭博客时发现的新功能，然后就折腾出了这个玩法本文达成成就：Coding运营上门（Doge） 介绍腾讯云开发者平台(Tencent Dev)改版成Coding团队版后，在每个仓库都自带了文件网盘功能。以下是官方介绍： 文件网盘是一个可协作对网盘，用于存储项目内各式各样的文件资料，兼容上传所有的文件格式，助力团队内的高效协作。不仅如此，CODING 文件网盘还支持对文件历史版本的记录与回溯，方便团队对项目资料整体进行版本管理与质量把控。除此，在网盘内还能够预览部分格式的文件，高效定位高频文档。帮助中心 简单来说就是： 支持上传文件大小不超过 300 M（反正我测试超过250M传不了.jpg），支持文件公开分享链接并可设置密码（不超过100M），支持文件历史版本记录与回溯。 合理利用的话，理论上就是个无限存储高速网盘。（本人电信200M实测跑满宽带） 根据评论区反馈，单仓库大小现已限制30G且文件外链分享限制100M以下。 上传创建项目首先需要一个Coding团队版账号（在Coding中新建一个项目，模板，项目名称随意。 开启功能理论上项目默认是不开启文件网盘功能的。在你创建的项目中依次打开【项目设置】-&gt;【项目与成员】-&gt;【功能开关】-&gt;【文件网盘】 需要注意的是，团队成员是否有调整与使用该功能的权限。 上传文件在项目的左栏依次打开【文档管理】-&gt;【文件网盘】-&gt;【全部文件】后，点击上传文件或者直接拖拽文件即可上传文件。 分享文件在你上传的文件点击分享按钮并开启分享。开启后会得到一个公开链接以及访问密码。 直链获取这里说下链接的组成结构。如上图所示，文件分享后都得到一个随机的文件ID，形成的文件ID在对文件的每一次修改（文件标题或文件内容的修改）都不会失效。以下是链接组成成分： 文件直链文件预览地址为https://团队ID.coding.net/s/文件ID而下载直链则为https://团队ID.coding.net/api/share/download/文件ID直接引用下载直链即可享受高速下载，且无其他限制。 示例（Android微信）预览：https://anak.coding.net/s/971f1c6c-4d32-483d-a5a0-422b5ca8862c直链链接：https://anak.coding.net/api/share/download/971f1c6c-4d32-483d-a5a0-422b5ca8862c 图片直链图片分享的预览地址与文件一致，都为https://团队ID.coding.net/s/文件ID而图片直链则为https://团队ID.coding.net/api/share/image/文件ID点击会跳转到 coding-net-production-file-ci.codehub.cn 开头的域名，即为图片文件CDN地址。 示例（图片）预览：https://anak.coding.net/s/329bd27a-5ef4-4fce-89f1-a139c926dcfd直链API：https://anak.coding.net/api/share/image/329bd27a-5ef4-4fce-89f1-a139c926dcfd 速度文件直链/图片预览的API均为上海腾讯云，在全国速度不错。 图片直链则使用全国腾讯云CDN加速。国内速度极佳。 后续虽然我感觉最近Coding的操作挺纳闷的，但功能方面是真香.jpg我也询问过Coding客服，目前他们打算放出文件网盘API Wiki，有能力的大佬也可以自行写一个上传分享接口程序（在写了 0%）。 最后 请勿上传法律禁止文件 请勿存放重要文件 请合理使用该服务","link":"/archives/coding-netdisk/"},{"title":"Valine自定义表情与QQ邮箱头像支持","text":"魔改Valine，添加自定义表情与QQ邮箱头像支持 添加QQ邮箱头像支持索引v1.4.5版本后所述功能均已实现，此文章仅为存档参考由于 v1.4.x 版本尚未开源，以下步骤均为修改已编译的 Valine.min.js 进行操作 由于某些原因，src目录将从v1.4.0后暂停更新.For some reason, the src directory will be suspended from updating after v1.4.0. 通过浏览器F12查看代码，定位头像后发现相关代码为 &lt;img class=&quot;vimg&quot; src=&quot;xxx&quot;&gt; 以本文 v1.4.4 最新版本为例，下载 Valine.min.js 后Ctrl + F 搜索 img class=&quot;vimg&quot; src= ，得到的代码片段为 可以看到，img src后的内容大致为 Gravatar CDN 地址 + 获取邮箱并MD5加密 + 返回Valine版本 Valine.min.js12345678910// &lt;img src=&gt;u = E.hide ? &quot;&quot; : '&lt;img class=&quot;vimg&quot; src=&quot;' + (E.cdn + (0, s.default)(t.get(&quot;mail&quot;)) + E.params) + '&quot;&gt;'// CDN引用部分E = {cdn: &quot;https://gravatar.loli.net/avatar/&quot;,ds: [&quot;mp&quot;, &quot;identicon&quot;, &quot;monsterid&quot;, &quot;wavatar&quot;, &quot;robohash&quot;, &quot;retro&quot;, &quot;&quot;],params: &quot;&quot;,hide: !1} QQ头像的接口为 http://q1.qlogo.cn/g?b=qq&amp;nk=QQ号&amp;s=尺寸 s=(spec)对应的头像尺寸有px 40×40, px 100×100 px 640×640测试发现数值1-5/40/640为px 40×40，数值100为px 100×100 所以最终的接口大致为 http://q1.qlogo.cn/g?b=qq&amp;nk=10001&amp;s=100 最终目标 获取邮箱判断是否为qq邮箱 提取qq号 将Valine中的头像地址改为上述接口地址 流程 判断是否是QQ邮箱，，是则以下操作，否则默认Gravator头像接口 正则筛选剔除–重命名了带英文的qq邮箱 获取QQ号 拼接头像地址 加入到img src 修改Valine js部分代码修改如下 Valine.min.js123456789101112var avatar_img = E.cdn + (0, s.default)(t.get(&quot;mail&quot;)) + E.params;if (t.get(&quot;mail&quot;).indexOf(&quot;@qq.com&quot;) &gt;= 0) { var prefix = t.get(&quot;mail&quot;).replace(/@.*/, &quot;&quot;); var pattern = /^\\d+$/g; var result = prefix.match(pattern); if (result !== null) { avatar_img = &quot;//q1.qlogo.cn/g?b=qq&amp;nk=&quot; + prefix + &quot;&amp;s=100&quot;; }}var l = t.get(&quot;link&quot;) ? /^https?\\:\\/\\//.test(t.get(&quot;link&quot;)) ? t.get(&quot;link&quot;) : &quot;http://&quot; + t.get(&quot;link&quot;) : &quot;&quot;, c = l ? '&lt;a class=&quot;vnick&quot; rel=&quot;nofollow&quot; href=&quot;' + l + '&quot; target=&quot;_blank&quot; &gt;' + t.get(&quot;nick&quot;) + &quot;&lt;/a&gt;&quot; : '&lt;span class=&quot;vnick&quot;&gt;' + t.get(&quot;nick&quot;) + &quot;&lt;/span&gt;&quot;, u = E.hide ? &quot;&quot; : '&lt;img class=&quot;vimg&quot; src=&quot;' + (avatar_img) + '&quot;&gt;', 修改前后diff Valine.min.js1234567891011121314151617181920var j = function (t, n, r) { var o = (0, A.default)('&lt;div class=&quot;vcard&quot; id=&quot;' + t.id + '&quot;&gt;&lt;/div&gt;'), i = t.get(&quot;ua&quot;), a = &quot;&quot;; i &amp;&amp; !/ja/.test(e.config.lang) &amp;&amp; (i = A.default.detect(i), a = '&lt;span class=&quot;vsys&quot;&gt;' + i.browser + &quot; &quot; + i.version + '&lt;/span&gt; &lt;span class=&quot;vsys&quot;&gt;' + i.os + &quot; &quot; + i.osVersion + &quot;&lt;/span&gt;&quot;), &quot;*&quot; === e.config.path &amp;&amp; (a = '&lt;a href=&quot;' + t.get(&quot;url&quot;) + '&quot; class=&quot;vsys&quot;&gt;' + t.get(&quot;url&quot;) + &quot;&lt;/a&gt;&quot;); var l = t.get(&quot;link&quot;) ? /^https?\\:\\/\\//.test(t.get(&quot;link&quot;)) ? t.get(&quot;link&quot;) : &quot;http://&quot; + t.get(&quot;link&quot;) : &quot;&quot;,+ var avatar_img = E.cdn + (0, s.default)(t.get(&quot;mail&quot;)) + E.params; //默认Gravator头像接口+ if (t.get(&quot;mail&quot;).indexOf(&quot;@qq.com&quot;) &gt;= 0) {+ var prefix = t.get(&quot;mail&quot;).replace(/@.*/, &quot;&quot;); //前缀+ var pattern = /^\\d+$/g; //正则表达式+ var result = prefix.match(pattern); + if (result !== null) {+ avatar_img = &quot;//q1.qlogo.cn/g?b=qq&amp;nk=&quot; + prefix + &quot;&amp;s=100&quot;;+ }+ } c = l ? '&lt;a class=&quot;vnick&quot; rel=&quot;nofollow&quot; href=&quot;' + l + '&quot; target=&quot;_blank&quot; &gt;' + t.get(&quot;nick&quot;) + &quot;&lt;/a&gt;&quot; : '&lt;span class=&quot;vnick&quot;&gt;' + t.get(&quot;nick&quot;) + &quot;&lt;/span&gt;&quot;,- u = E.hide ? &quot;&quot; : '&lt;img class=&quot;vimg&quot; src=&quot;' + (E.cdn + (0, s.default)(t.get(&quot;mail&quot;)) + E.params) + '&quot;&gt;',+ u = E.hide ? &quot;&quot; : '&lt;img class=&quot;vimg&quot; src=&quot;' + (avatar_img) + '&quot;&gt;', d = u + '&lt;div class=&quot;vh&quot;&gt;&lt;div class=&quot;vhead&quot;&gt;' + c + &quot; &quot; + a + '&lt;/div&gt;&lt;div class=&quot;vmeta&quot;&gt;&lt;span class=&quot;vtime&quot; &gt;' + (0, w.default)(t.get(&quot;insertedAt&quot;), e.i18n) + '&lt;/span&gt;&lt;span class=&quot;vat&quot; data-root-id=&quot;' + (t.get(&quot;rid&quot;) || t.id) + '&quot; data-self-id=&quot;' + t.id + '&quot;&gt;' + e.i18n.t(&quot;reply&quot;) + '&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;vcontent&quot; data-expand=&quot;' + e.i18n.t(&quot;expand&quot;) + '&quot;&gt;' + (0, k.default)(t.get(&quot;comment&quot;)) + '&lt;/div&gt;&lt;div class=&quot;vreply-wrapper&quot; data-self-id=&quot;' + t.id + '&quot;&gt;&lt;/div&gt;&lt;div class=&quot;vquote&quot; data-self-id=&quot;' + t.id + '&quot;&gt;&lt;/div&gt;&lt;/div&gt;'; o.html(d); 然后主题引用自己修改后的Valine.min.js，即可开箱食用。icarus主题引用方法 添加自定义表情修改src编译前修改 plugins/emojis/light.json v1.4.x版本不适用 配置项添加配置项中添加 12emoticon_url: '/demo/demo',emoticon_list: [&quot;xxx.jpg&quot;] 如 12emoticon_url: 'https://cloud.panjunwen.com/alu',emoticon_list: [&quot;狂汗.png&quot;,&quot;不说话.png&quot;,&quot;汗.png&quot;] 反正我是没成功过.jpg 直接修改Valine js文件故技重施 在Valine.min.js搜索定位到表情地址然后照葫芦画瓢修改即可。格式大致如下 123456789function (e, t) { e.exports = { 滑稽: &quot;https://cdn.jsdelivr.net/gh/wittoy/cdn@latest/images/valine/huaji.gif&quot;, 彩虹滑稽: &quot;https://cdn.jsdelivr.net/gh/Wittoy/cdn@latest/images/valine/chhuaji.webp&quot;, doge: &quot;https://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/a1/2018new_doge02_org.png&quot;, dog: &quot;https://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/22/2018new_erha_org.png&quot;, 高兴: &quot;https://cdn.jsdelivr.net/gh/Wittoy/cdn@latest/images/valine/高兴.png&quot;, 尴尬: &quot;https://cdn.jsdelivr.net/gh/Wittoy/cdn@latest/images/valine/尴尬.png&quot; } 须注意的是，为了方便操作，最新版本格式上是CDN前缀+图片文件名的形式，你可以Ctrl + F搜索 t.DEFAULT_EMOJI_CDN 修改CDN地址或留空即可。这里我采用的即为留空方案。 顺便提供下我自己修改后的 Valine.min.js ，以及 表情资源 icarus主题引用Icarus引用方法：下载 valine.jsx 到hexo-theme-icarus/layout/comment后，修改内容如下 12345- const { cacheComponent } = require('../../util/cache');+ const { cacheComponent } = require('hexo-component-inferno/lib/util/cache');- jsUrl: helper.cdn('valine', '1.4.4', 'dist/Valine.min.js')+ jsUrl: helper.url_for('js/Valine.min.js') 然后把修改后的 Valine.min.js 丢至 hexo-theme-icarus/source/js 以上内容转载并修改自 Uncle_drew 喵窝･札记","link":"/archives/valine-custom/"},{"title":"折腾TCShare云盘目录程序","text":"TCShare v3安装折腾记录。 演示站 昨天撸了个30T的bug天翼云，也不知道什么时候收回，就搭了个这东西。 项目地址 个人服务器环境为Debian 10，php7.2，Nginx1.16.1 准备阶段下载TCShare首先下载TCShare到你的服务器目录git clone https://github.com/xytoki/TCShare.git 你的服务器目录 安装Composer这里不再阐述，Oneinstack用户可直接到Oneinstack目录中执行./addons.sh安装。 删除php禁用函数自行修改php.ini配置，在disable_functions（禁用函数列表）中删除 putenv proc_open。然后执行 service php-fpm restart 来重启PHP。 安装安装扩展包切换到程序目录，执行 composer install 这里我出现的问题是 123The Process class relies on proc_open, which is not available on your PHP installation.The archive may contain identical file names with different capitalization (which fails on case insensitive filesystems)Unzip with unzip command failed, falling back to ZipArchive class 解决方法为php禁用函数删除 proc_open 和 apt-get install -y zip unzip 创建.env文件在程序目录创建.env文件，并自行写入配置。 .env12345678910XS_KEY_ct=ctyunXS_KEY_ct_FD= #应用文件夹名XS_KEY_ct_AK= #AKXS_KEY_ct_SK= #SKXS_APP_1=/ #挂载路径XS_APP_1_NAME=TCShare #网盘名称XS_APP_1_THEME=mdui #界面主题XS_APP_1_BASE=/ #网盘内路径XS_APP_1_KEY=ct #对应上面Key的ID 其中的 App Key，App Secret 需自己配置，也可私信我获取多盘搭建的话可参考作者的.env文件配置 README 配置Nginx伪静态防止.env文件内容暴露 vhost.conf1234try_files $uri $uri/ /index.php$is_args$args;location ~ /\\.env { deny all;} 授权获取授权链接直接访问你的服务器地址。点击 Click here to authorize 授权。 登录账号输入你的天翼云账号密码，登录即可。 获取Access Token登录后会自动跳转，得到Access Token（由于我的Token已经获取成功，故不会再显示）后在 .env 加入一行 XS_KEY_ct_ACCESS_TOKEN=你的AccessToken 如果跳转为127.0.0.1的话，请自行修改成你的服务器地址。 后续每个月都要手动为每个网盘的Access Token续期。续期方法为访问你的服务器地址后加/-renew即可，如 http://mysite.com/-renew。 按原作者的说法，定时任务是无法生效的。","link":"/archives/tcshare/"},{"title":"Debian 10(Buster)安装OpenJDK 8","text":"在Debian 10(Buster)安装openjdk-8-jdk/openjdk-8-jre 由于安全问题，Debian在Buster版本已不再支持直接通过 apt-get 安装 openjdk-8-jdk 以及 openjdk-8-jre 。 12345Package openjdk-8-jdk-headless is not available, but is referred to by another package.This may mean that the package is missing, has been obsoleted, oris only available from another sourceE: Package 'openjdk-8-jdk-headless' has no installation candidate 这里通过2种方式来安装OpenJDK JDK/JRE 8。 SID源安装以安装 openjdk-8-jdk 为例 123echo &quot;deb http://deb.debian.org/debian/ sid main&quot; &gt;&gt; /etc/apt/sources.listapt-get update &amp;&amp; apt-get install -y openjdk-8-jdk 此方法简单粗暴，但会引用不稳定的deb安装包，请谨慎使用。 或安装完jdk/jre后直接删除sid源（卸磨杀驴.jpg） AdoptOpenJDK安装这里同样也采用deb包安装 安装所需依赖apt-get update &amp;&amp; apt-get install -y apt-transport-https software-properties-common ca-certificates lsb-release wget dirmngr gnupg 添加 AdoptOpenJDK GPGwget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add - 添加 AdoptOpenJDK 官方仓库add-apt-repository --yes https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/ 若出现-bash: add-apt-repository: command not found 请检查是否成功安装所需依赖。 安装所需包执行 apt-get update 后 12345#安装OpenJDK 8 JDKapt-get install adoptopenjdk-8-hotspot#安装OpenJDK 8 JREapt-get install adoptopenjdk-8-hotspot-jre 官方教程https://adoptopenjdk.net/installation.html?variant=openjdk8&amp;jvmVariant=hotspot#linux-pkg参考自https://stackoverflow.com/questions/57031649/how-to-install-openjdk-8-jdk-on-debian-10-buster","link":"/archives/debian10-openjdk/"},{"title":"GitHub+ZEIT+Coding持续集成部署Hexo","text":"GitHub托管+ZEIT集成部署+Coding页面分发Hexo 这里说下采用这种方法的原因。原来想采用Travis CI集成部署的，但发现ZEIT的线路不错，且又想和Coding Pages一起用，所以只通过ZEIT集成部署再推送至Coding，DNS分运营商解析实现速度更快。(说白了就是白折腾) 其实是可以通过Travis CI持续集成直接一键推送Page到ZEIT和Coding的。（ 添加Token首先去Coding添加Token Coding右上角头像 - 个人设置 访问令牌 - 新建令牌 令牌描述（随意）以及仓库控制权限 记住生成的Token和自己的Token用户名，其中Token只显示一次，以后只能重置Token。 安装Now CLI123npm i -g nownow loginnow secrets add secret-name secret-value 其中的secret-name为你的密钥名称（需要记住，可重命名），secret-value为上面所创建的Token https://zeit.co/docs/v2/serverless-functions/env-and-secrets?query=env#adding-secrets 添加now.js在根目录创建now.js now.js12345678910111213{ &quot;version&quot;: 2, &quot;alias&quot;: [&quot;www.pearik.com&quot;, &quot;wsl.now.sh&quot;, &quot;pearik.com&quot;], //添加你的自定义网址，或者在ZEIT - Domains中添加。 &quot;build&quot;: { &quot;env&quot;: { &quot;CODING_TOKEN&quot;: &quot;@secret-name&quot; //secret-name填写自己上面设置的的名称。 } }, &quot;routes&quot;: [ { &quot;handle&quot;: &quot;filesystem&quot; }, { &quot;src&quot;: &quot;/(.*)&quot;, &quot;status&quot;: 404, &quot;dest&quot;: &quot;/404.html&quot; } //开启404自定义页面跳转 ]} 安装Shelljsnpm i shelljs --save 添加Coding Pull js以我的个人设置为例，在根目录创建coding.js请按照注释自行修改相关配置。 coding.js123456789101112131415161718var shell = require('shelljs');var env = process.env.CODING_TOKEN;//执行npm run build 命令if (shell.exec('npm run build').code !== 0) { shell.echo('Error: Git commit failed'); shell.exit(1);}shell.cd('public');shell.exec('git init');shell.exec(&quot;git config --global user.name 'admin@pearik.com'&quot;); //Coding用户名（其实就是邮箱.jpg）shell.exec(&quot;git config --global user.email 'admin@pearik.com'&quot;); //Coding邮箱shell.exec('git add .');shell.exec(&quot;git commit -m 'ZEIT CLI Auto Build'&quot;); //git commit 可随意shell.exec(&quot;git remote add origin https://CODING_TOKENNAME:$CODING_TOKEN@CODING_REPO&quot;);shell.exec(&quot;git push --force --quiet https://CODING_TOKENNAME:$CODING_TOKEN@CODING_REPO&quot;)//CODING_TOKENNAME替换成你的Coding Token用户名，CODING_REPO替换成你的仓库地址。 如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。 添加Node Scripts修改根目录的package.json package.json1234&quot;scripts&quot;: { &quot;build&quot;: &quot;hexo clean &amp;&amp; hexo g&quot;, &quot;deploy&quot;: &quot;node ./coding.js&quot;} Push源码到GitHub把hexo源码Push到GitHub仓库 记得.gitignore配置中添加node_modules（逃） ZEIT导入 https://zeit.co/import/git 登录后导入仓库文件。 选择你的Hexo源码仓库。 设置项目名称（注意不能有小数点）。 设置项目运行目录，默认即可。 设置Hexo部署命令。其中第一项Build Command改成npm run deploy Finish.Enjoy it. 当GitHub代码有新变动时触发ZEIT自动集成部署，并推送生成的页面到Coding。","link":"/archives/hexo-ci/"},{"title":"Vercel(ZEIT)使用自定义404页面","text":"在Vercel(ZEIT)平台托管的资源开启并使用自定义404页面 免费套餐默认内置的404页面是这样的 虽然挺简洁明了，但是对用户没有帮助。特别是像Hexo之类的可以同主题一起渲染成更好康的404页面。 下面通过修改now.json配置和api routes实现使用自定义404页面。 特别一说 这功能咕了快有一年多了（https://spectrum.chat/zeit/now/custom-404-page~1f921045-60d9-477b-b23c-1626c9fa1565 Now v2 now.json https://zeit.co/docs/configuration#routes/advanced/custom-404 Now2项目中，Vercel(ZEIT)采用根目录下的now.json文件配置来自定义其构建过程，可通过Routes进行重定向，指定页面，自定义404等功能。 对于filesystem中不匹配的 返回处于根目录的 404.html 404错误页面文件 now.json1234567{ &quot;version&quot;: 2, &quot;routes&quot;: [ { &quot;handle&quot;: &quot;filesystem&quot; }, { &quot;src&quot;: &quot;/(.*)&quot;, &quot;status&quot;: 404, &quot;dest&quot;: &quot;/404.html&quot; } ]} hexo添加方式：如果你采用的是Vercel(ZEIT) Page的话，只需在Hexo目录下的 /source 新建 now.json 并复制上述代码，hexo g 即可生成在 /public。如果是托管代码自动部署的，则添加 now.json 在根目录即可。 注：使用gulp压缩的最好忽略此文件，以避免出现奇怪的现象。 实在懒得复制的直接下载我的配置也行。 顺便也可以康下我的404页面（ Zero Config以下是官方屁话 With Now 2.0, we introduced the most powerful and scalable platform for static websites and serverless functions powered by any language or frameworkThis came at the expense of writing now.json files. Today, we are introducing Zero Config, a conventional and completely backwards-compatible approach to deployment.https://zeit.co/blog/zero-config 是的，官方又咕了https://spectrum.chat/zeit/now/custom-404-page~1f921045-60d9-477b-b23c-1626c9fa1565?m=MTU4MDQyNzQ3OTI1Ng==","link":"/archives/zeit-404-page/"},{"title":"免费静态托管服务","text":"记录下大厂免费额度的静态网站托管服务 白嫖他不香吗 GitHub 可自定义域名 支持HTTPS，一键SSL配置 Fastly Anycast节点 国内访问速度慢 电信联通走日本NTT，移动走圣何塞 推荐程度 ★★★★ 作为最常用的同性交流代码托管平台，GitHub Pages是大多用户的第一选择。除去国内同非SVIP的百度云一样的速度之外，部署简单，上手难度低也是他的一大优点。 注：GitHub屏蔽百度爬虫。 GitLab 可自定义域名，自定义证书 支持HTTPS，一键SSL配置 GitLab-CI集成 Fastly Anycast节点 国内访问速度与GitHub相似 推荐程度 ★★★★ 与GitHub功能上差不多，自带的GitLab-Ci持续部署能有效地提高效率。 Netlify 可自定义域名 支持HTTPS HTTP/2 IPv6 自定义页面重定向，静态资源优化 DigitalOcean 美国纽约&amp;新加坡节点 推荐程度 ★★★★★ Netlify提供的服务应该算是最多的。自定义插入代码、打包和压缩js/css、压缩，处理图片、自动部署、提供Webhooks与API等功能。 Vercel(ZEIT) 可自定义域名，自定义证书（付费） 支持HTTPS 提供ServerLess服务 GCP&amp;AWS节点 亚洲有香港和台湾节点，移动绕美国 推荐程度 ★★★★★ 大陆速度不错，可使用 now.sh CLI或GitHub，GitLab，Bitbucket导入项目进行自动代码部署，提供ServerLess，分配的*.now.sh域名很好康，就是免费流量才20G. 好像无限流量了.2020.4.22 后改名为Vercel（收购.jpg）线路解析推荐 电信香港线路IP：35.241.110.125（联通绕美）电信联通台湾线路IP：104.199.217.228（部分地区电信可能会出现绕美）移动AWS日本/香港线路IP：18.178.194.147/18.162.37.140 目前默认CNAME节点采用Anycast技术（IP：76.76.21.21），电信飞AWS香港，移动日本/新家坡/香港，联通脸黑走tata跑新加坡到印度了。。。 Google FireBase 可自定义域名 支持HTTPS 只能通过 CLI 上传代码 Fastly Anycast节点 国内访问速度与GitHub相似 推荐程度 ★★★ Google Analytics等谷歌服务集成，实时数据库，实验室优化。部署方式只能用官方的CLI，说是免费，但免费额度的流量少且有其他限制，一不小心房子就没了（ Heroku 可自定义域名（须绑卡验证） 支持HTTPS AWS 美国节点 大陆登录页面被墙（由于滥用代理严重） 推荐程度 ★★ 大陆访问速度较慢，静态托管上中规中矩，其实功能可不止托管静态那么简单（ Coding 可自定义域名 支持HTTPS 全球腾讯云新加坡CN2/香港CN2 推荐程度 ★★★★ SLA低，曾多次宕机。被腾讯收购后中规中矩，Coding个人版于2020年1月20日开始转移到团队版（吐槽下操作太憨批了） 线路不错，迁移到团队版后服务器由腾讯云香港CN2切至腾讯云新加坡CN2（不知道会不会切回来）。注意的是，移动可能会无法访问（辣鸡移动） 这里给一个香港ip：119.28.218.218 Gitee 支持HTTPS 上海腾讯云节点 推荐程度 ★★ 自定义域名需要付费套餐（且域名需要备案） 我备案了还会用这玩意？ Tencent SCF 2019年12月4号后对外流量开始计费。 总结功能方面，Netlify是上面所有中功能最全的。 速度方面，推荐Coding+ZEIT+GitHub&amp;jsDelivr静态资源的方式。 线路方面，电信采用Coding&amp;Vercel（注意防止踩雷GCP线路问题），联通采用Vercel，移动亦可Netlify，CloudFlare或Coding（不太推荐）。","link":"/archives/free-pages/"},{"title":"Hexo优化AdSense代码加速整站","text":"为Hexo icarus主题优化AdSense代码 减少AdSense的JS请求谷歌官方的代码 12345678910&lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-id&quot; data-ad-slot=&quot;id&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;&lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt; 分解一下，首先通过async异步请求加载adsbygoogle.js核心文件，待加载完成后再push到ins内，显示广告内容。 当我们需要放入广告位时，就将该段代码放入。可是如果有多个广告位的时候，就会引用多个相同的JS。 Q：如果我的网页上有多个广告单元，我是否要为每个广告单元添加 &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt; A：不，不需要，adsbygoogle.js 可以一次性加载。 上述是谷歌官方给的QA，由此可知我们不需要多次加载JS 如果你有多个广告位，那就可以把该段引入JS的代码，放到&lt;head&gt;里，既可以达到一次载入JS，所有&lt;ins&gt;都可以接到广告。 JS监听加载将代码改为如下 12345678910&lt;script&gt;window.onload = function() { setTimeout(function() { let script = document.createElement(&quot;script&quot;); script.setAttribute(&quot;async&quot;, &quot;&quot;); script.src = &quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;; document.body.appendChild(script); }, 2e3);}&lt;/script&gt; Hexo icarus v3.0则修改成 head.jsx123456789const adjs = `window.onload = function() { setTimeout(function() { let script = document.createElement(&quot;script&quot;); script.setAttribute(&quot;async&quot;, &quot;&quot;); script.src = &quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;; document.body.appendChild(script); }, 2e3);}`;{adsenseClientId ? &lt;script dangerouslySetInnerHTML={{ __html: adjs }}&gt;&lt;/script&gt; : null} 转载自ShenYun，篱落闲栈。","link":"/archives/adsense-optimization/"},{"title":"安卓端实用运维软件","text":"删库从入门到跨平台（ 作为一名随时可能把服务器搞炸的人来说，如果恰好手边没有电脑，服务器却土豆了怎么办？那只能顶着用移动设备救个急了。 SSH连接软件这里比较有名的是Termius与JuiceSSH，两者之间有以下特点。 共同点支持SSH，Telnet，Mosh，本地设备连接；支持生成，导入和导出密钥，支持密码或密钥认证；支持XTerm-256色，VT100等终端类型；有端口转发²，代码段¹²，AWS EC2导入¹²，同步与备份¹²，主屏幕小工具¹²，个性化配色方案，OTG键盘等功能；软件安全锁²，采用AES-256加密数据，支持二次身份认证（OTP），无广告。 不同点Termius支持SSH Agent Forwarding¹，Http/Socks5代理¹，Digital Ocean主机导入¹，软件指纹锁¹，多个主机保存并运行代码片段¹，SFTP连接¹，跨设备同步¹，多设备同步保存或运行代码¹，终端标签¹，Cli工具同步ssh/config¹，自动OS识别，vanilla终端类型，个性化字体，只支持英文。高级版采用订阅制，8.33$/m （留下了没有钱的泪水)（GitHub学生包白嫖真香）。 JuiceSSH有丰富的插件（一点都不），支持简体中文，与Tasker插件有各种玩法。高级版采用买断制，39.90HK即可终身食用。 总结个人还是喜欢用JuiceSSH（别问，问就是没钱），虽然在Google Play已停更且对Android 10兼容不太友好（不适配原生全面屏），但比较实用。 注：¹.Termius高级功能。 ².JuiceSSH高级功能。 其他实用软件Best Trace由ipip.net推出的全终端Trace软件，是ipip.net基于Geo-IP库及rDNS数据库，精确到省级。能显示ASN，地图图像，支持IPv4，IPv6。 妈妈再也不用担心我买的机器是假的GIA CN2辣！下载地址：CoolApk IPIP.NET HE Network Tools由Hurricane Electric（飓风电子网络公司）发行的一款软件。同样已停更多年（。同类软件有很多可替代，这里推荐的原因是我永远喜欢Hurricane Electric（超大声）支持ARP，局域网发现，域名DNS记录查询，IP计算器，MAC前24位计算，Iperf2/3（客户端），Ping，Traceroute，TCP端口扫描，Whois，NDP，SSL/TLS分析（这个很实用）等工具。下载地址：Google Play","link":"/archives/android-tools/"},{"title":"Magisk自定义通道","text":"Magisk国内中转自定义通道 Api Docs 该通道包含稳定版(Stable)，测试版(Beta)，金丝雀版(Canary)的中国大陆加速服务。 Canary采用国内CDN以解决大陆访问GitHub以及Amazon S3下载速度慢的问题，Beta/Stable则采用Nginx反代方式加速资源。 所有文件均来自GitHub分发，同步周期为12h，绝不含其他内容，可放心食用。如有此通道导致的变砖/死机/损坏等问题，均不受理。 稳定版 https://api.wsl.pub/magisk/stable.json 测试版 https://api.wsl.pub/magisk/beta.json 金丝雀版 https://api.wsl.pub/magisk/canary.json 食用方法：Magisk Manager - 设置 - 更新通道 - 自定义，复制粘贴上面所需版本的网址。 .youknowit { color: #000; background-color: #000; } .youknowit:hover { color: #fff; } 我很可爱，请给我钱 If this helps you, plz 打钱 to my Bitcoin wallet：1MDn8DL9zzRmrQ15aQGszcUx4VMPQBnyDT","link":"/archives/magisk-files/"},{"title":"Linux Cloud 内核介绍与安装","text":"也许是虚拟化设备最好用的内核（？） 介绍https://packages.debian.org/sid/linux-image-cloud-amd64 This package depends on the latest Linux kernel and modules for use on Amazon EC2, Google Compute Engine and Microsoft Azure cloud platforms. 在基于虚拟化的64位设备，如 KVM Xen（不包括VMWare）的虚拟服务器（VPS）中，Cloud内核往往是最佳选择。且本人已成功在128M内存安装并启动Debian10。 安装步骤安装所需依赖apt install lsb-release 添加 Backports 源12345678cat &gt;&gt; /etc/apt/sources.list.d/backports.list &lt;&lt; EOFdeb http://deb.debian.org/debian $(lsb_release -sc)-backports main EOF#国内可考虑使用中科大的源cat &gt;&gt; /etc/apt/sources.list.d/backports.list &lt;&lt; EOFdeb https://mirrors.ustc.edu.cn/debian $(lsb_release -sc)-backports main EOF 执行升级apt -t $(lsb_release -sc)-backports update &amp;&amp; apt -y -t $(lsb_release -sc)-backports upgrade 注：更新的同时可能会自动更新新内核，可重启后卸载掉 安装内核sudo apt -t $(lsb_release -sc)-backports install linux-image-cloud-amd64 linux-headers-cloud-amd64 安装成功后重启即可食用，可使用uname -r查看内核是否安装成功 卸载原来内核12dpkg -l | grep linux-imageapt-get purge 欲卸载的旧内核 其他注意事项 该内核仅有amd64位版本 该内核精简了云平台几乎不可能用到的驱动，如WiFi，蓝牙，故体积较小且VMWare不能安装此内核。","link":"/archives/linux-cloud-kernel/"},{"title":"告别","text":"嗨，请准确无误地输入密码查看哟！ 924b54b2ffdd15ff50fb5754fb2f41ef701d3bdb18ed04680dc1cf36b30891140e63b9015cb1dd8f76478bf0a6bd027e60d36d4bec107a305fe9ea2c2ae0f01b899ef30f047df9a22bbe27b86f8c0f37f84f8e703d5575895af1f80fcb62e074467c53258b3be45f78ae503206f0284e9b03856a2cefea1f7e67cab1d61666251f660ca8fb651f80dc688658f77af58660fa539f555a1e7fd87d269e26525cf0d65032cdcc5c1ea4e8dea67aecbaf59eaec945aa0361e4bba15a89dcf0d43f661b70e491ab7f9590b038b4e4bb0f62b23a3f3ed50549ea10563a66f28e3d63c1f48eb22f465b51dbe57a1b9ee64ec05038ce54456d64d66478b883dc145b0c7452672acbf9915e4f12ac99598da17930e524f73b6e2e28a304dfd866a53fe5ff54352bdf3e9df67409cc000abfe6ce20fe9dd2199f0724a0a2e799e3ab10dadadee06d4b97d27c7ff1072d416376261bc2d965ca5ff59a3d8d351e8ded541a43ea38ce0e798a3779ecac668bef9b9e8fe0d1203b7c9713c07c75de00c270c667c67c959d682edfd56cac1ad0a8d6b3002a40cdf6d8d770c3c42859c5f0f3c4d4ffd2632072eeccdcbd8ef5ca4b2c02a14619544fcbefe3b2db525af56e7d29cbd097572ed40c1794ef8db0f15311c349e66d7176ca7bdb11beee6ee692c7dc58","link":"/archives/bye/"},{"title":"Debian 10（Buster）使用源安装LNMP（LEMP）","text":"在最新版本的Debian 10（Buster）中安装LNMP 理论能在Debian/Ubuntu任意版本安装最新lnmp（ 删库塔是什么 准备工作更新系统并安装依赖12apt update &amp;&amp; apt upgrade -yapt install -y build-essential curl vim wget unzip apt-transport-https lsb-release ca-certificates git 加入 Backports 源12345678910cat &gt;&gt; /etc/apt/sources.list.d/backports.list &lt;&lt; EOFdeb http://deb.debian.org/debian $(lsb_release -sc)-backports main deb-src http://deb.debian.org/debian $(lsb_release -sc)-backports main EOF#国内可考虑使用中科大的源cat &gt;&gt; /etc/apt/sources.list.d/backports.list &lt;&lt; EOFdeb https://mirrors.ustc.edu.cn/debian $(lsb_release -sc)-backports main deb-src https://mirrors.ustc.edu.cn/debian $(lsb_release -sc)-backports main EOF 执行升级1apt -t $(lsb_release -sc)-backports update &amp;&amp; apt -y -t $(lsb_release -sc)-backports upgrade 安装Nginx这里使用Ondřej Surý大神打包好的 Nginx 源 添加GPGwget -O /etc/apt/trusted.gpg.d/nginx-mainline.gpg https://packages.sury.org/nginx-mainline/apt.gpg 添加sury源12345678cat &gt;&gt; /etc/apt/sources.list.d/nginx.list &lt;&lt; EOFdeb https://packages.sury.org/nginx-mainline/ $(lsb_release -sc) main EOF#国内同样可考虑使用香港源cat &gt;&gt; /etc/apt/sources.list.d/nginx.list &lt;&lt; EOFdeb https://mirror.xtom.com.hk/sury/nginx-mainline/ $(lsb_release -sc) main EOF 安装apt update &amp;&amp; apt install -y nginx-extras 安装前最好屏蔽Backports仓库下的Nginx 12345cat &gt;&gt; /etc/apt/preferences &lt;&lt; EOFPackage: nginx*Pin: release a=buster-backports Pin-Priority: 499EOF 安装完毕后，可以使用nginx -v查看当前安装版本了 开机启动Nginxsystemctl enable nginx 安装PHP这里同样使用Ondřej Surý大神的PHP源，同时他也是Ubuntu/Debian PHP软件源的官方维护者之一。 添加GPGwget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg 添加sury源1234sh -c 'echo &quot;deb https://packages.sury.org/php/ $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/php.list'#国内机器同样可以采用香港源sh -c 'echo &quot;deb https://mirror.xtom.com.hk/sury/php/ $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/php.list' 安装这里以php7.3与使用opcache缓存为例 apt update &amp;&amp; apt install -y php7.3-fpm php7.3-mysql php7.3-curl php7.3-gd php7.3-mbstring php7.3-xml php7.3-xmlrpc php7.3-opcache php7.3-zip php7.3 php7.3-bz2 设置php修改/etc/php7.3/fpm/php.ini,防止跨目录攻击 sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/7.3/fpm/php.ini 安装MySQL考虑之下，这里以安装Percona Server 8.0为例 Percona Server是MySQl其中分支，同MariaDB一样，拥有完全兼容 MySQL 协议，性能优化等特点。注意：最好使用2G以上运存服务器!若为1G左右更推荐安装MySQL(或Percona Server)5.6 及以下版本 添加并启动Percona Server源123456789101112wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb#清华源wget https://mirrors.tuna.tsinghua.edu.cn/percona/apt/percona-release_latest.$(lsb_release -sc)_all.debdpkg -i percona-release_latest.$(lsb_release -sc)_all.deb#国内可替换成清华源sed -i 's/repo.percona.com/mirrors.tuna.tsinghua.edu.cn\\/percona/g' /etc/apt/sources.list.d/percona-release.list 即可apt updatepercona-release setup ps80 安装Percona Serverapt install -y percona-server-server 安装时会弹出设置密码界面，自行设置即可 中间会弹出一大堆的文档，OK即可 然后会弹出加密方法选择页面，推荐选第二个，兼容传统版本 123456789101112……………………………………… * Percona Server is distributed with several useful UDF (User Defined Function) from Percona Toolkit. * Run the following commands to create these functions: mysql -e &quot;CREATE FUNCTION fnv1a_64 RETURNS INTEGER SONAME 'libfnv1a_udf.so'&quot; mysql -e &quot;CREATE FUNCTION fnv_64 RETURNS INTEGER SONAME 'libfnv_udf.so'&quot; mysql -e &quot;CREATE FUNCTION murmur_hash RETURNS INTEGER SONAME 'libmurmur_udf.so'&quot; * See http://www.percona.com/doc/percona-server/8.0/management/udf_percona_toolkit.html for more detailsCreated symlink /etc/systemd/system/multi-user.target.wants/mysql.service → /lib/systemd/system/mysql.service. 至此已完成安装，执行mysql -V即可查看当前版本 12root@Martis:~# mysql -Vmysql Ver 8.0.15-6 for debian-linux-gnu on x86_64 (Percona Server (GPL), Release '6', Revision '63abd08') 常用管理命令Nginx启动/停止/重启 systemctl start/stop/restart nginx php7.3启动/停止/重启 systemctl start/stop/restart php7.3-fpm MySQL启动/停止/重启 systemctl start/stop/restart mysql Nginx配置路径/etc/nginx/sites-enabled/*.conf Nginx通用配置 1234567server { listen 80; listen [::]:80; root /var/www/example.com; index index.php index.html index.htm; server_name example.com;} 开启php7.3只需在相应配置中添加伪静态 1234location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.3-fpm.sock; } 注：php版本均以7.3为例","link":"/archives/lnmp/"},{"title":"Linux安装Node.js环境","text":"官方源或nvm方式安装nodejs 常规安装以安装v12.x.x版本为例 1234567#Ubuntu/Debian curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -apt update &amp;&amp; apt install -y nodejs#CentOS/RedHatcurl --silent --location https://rpm.nodesource.com/setup_12.x | sudo bash -yum update &amp;&amp; yum install -y nodejs 然后执行node -v与npm -v查看是否安装成功 NVM安装 Node Version Manager，简称NVM，为Node版本管理器 下载12345curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.35.2/install.sh | bash#或使用wget wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.35.2/install.sh | bash 激活nvmsource ~/.nvm/nvm.sh 激活后，重启下命令行窗口，或者直接打开一个新的命令行窗口，进行后续操作。 列出node版本nvm ls-remote nvm ls-remote会列出所有可用的 Nodejs 版本，如果输出中看到很多很多个版本号，就表示 nvm 安装好了。最后一个版本号就是当前最新的 Nodejs 版本，这里安装以本文发行时间的最新版本v12.7.0为例 nvm install v12.7.0 1234567root@Martis:~# nvm install v12.7.0Downloading and installing node v12.7.0...Downloading https://nodejs.org/dist/v12.7.0/node-v12.7.0-linux-x64.tar.xz...############################################################ 100.0%Computing checksum with sha256sumChecksums matched!Now using node v12.7.0 (npm v6.10.0)Creating default alias: default -&gt; v12.7.0 到此已经成功安装Nodejs v12.7.0 npm v6.10.0版本 切换版本前面所介绍的，NVM为Node版本切换器，所以可以随意切换版本。在此以切换v11.0.0版本为例 nvm install v11.0.0 装好之后，可以执行nvm ls查看安装的版本，以及default指向的默认版本。 修改默认版本方法： 1nvm alias default v*.*.* #其中*替换成对应版本即可 总结个人比较喜欢第二种方式，可以列出所有nodejs版本，且能方便快捷切换版本 注：国内机器可以考虑使用淘宝源，以加快速度 npm install -g cnpm --registry=https://registry.npm.taobao.org","link":"/archives/nodejs/"},{"title":"Avicii Hi-res (44.1Khz&#x2F;24Bit,2015之后)专辑","text":"R.I.P Avcii 天翼云盘OneDrive","link":"/archives/avicii/"},{"title":"Typecho转Hexo折腾过程","text":"搬迁到Hexo时所遇到的坑（ 起因迫于Typecho咕咕咕，加上原来Typecho的主题就是由Hexo移植过来的，才有了换静态博客Hexo的想法 主要还是没钱续费服务器了（ 搭建步骤安装Nodejs可以参考我另一篇文章 Linux中Nodejs环境的安装 Hexo安装官方文档，请（ 主题这里选用的是Volantis（Material X）主题，有想法的看官方文档（ 2020/02/01 Updated换成icarus了,并魔改了一番（魔改内容 搭建时所挖的坑文章永久链接博客用Typecho的时候，链接采用的是 http://xxx.com/archives/xxx.html 的WordPress形式。如果放弃原有的方式的话，就要考虑网站收录的问题。在Hexo中你要设置成WordPress形式的话，只需修改_config.yml中的permalink参数为 permalink: /archives/:title.html 更多修改方式可参考官方文档 评论Typecho原来采用的是Disqus评论系统。迫于天朝风评迫害，才考虑转为Valine。 本主题可以快捷从Disqus,Gitalk,Valine,Livere共4者中选择一个中意的评论系统 icarus主题设置CSS背景图采用 博天api，由 imaegoo, removeif 大佬博客整体魔改而来（ 整体上没啥区别，就字体，布局，icon，cdn和seo上的小优化。源码在GitHub可自行查看修改内容。 好像没啥要说的了，有啥问题可以来问（大概也不会）-(","link":"/archives/hello-hexo/"},{"title":"Debian9开机启动rc.local","text":"在使用较新版本的Ubuntu/Debian系统使用rc.local 在使用较新版本的Ubuntu/Debian系统时，原来写入/etc/rc.local或者/etc/rc.d/rc.local文件中的开机命令不执行了? Ubuntu 16.04以后，默认进程启动管理已经切换至systemd，不再使用init.d。 如果想和之前一样使用rc.local设置开机自启动，可以通过以下步骤 修改rc-local.service我们可以发现，/lib/systemd/system/目录下存在一个rc-local.service，但缺少Install信息，系统就不认为他是个systemd服务。 12345678910111213141516cat &gt; /etc/systemd/system/rc-local.service &lt;&lt;EOFDescription=/etc/rc.local CompatibilityDocumentation=man:systemd-rc-local-generator(8)ConditionFileIsExecutable=/etc/rc.localAfter=network.target[Service]Type=forkingExecStart=/etc/rc.local startTimeoutSec=0RemainAfterExit=yesGuessMainPID=no[Install]WantedBy=multi-user.targetEOF 加入所需启动的服务即可，记得权限chmod +x /etc/rc.local 启动rc-local服务123systemctl daemon-reloadsystemctl start rc-localsystemctl enable rc-local","link":"/archives/rc-local/"},{"title":"利用OTG开启黑阈","text":"已ROOT安卓手机给未ROOT安卓手机开启黒域 所需工具 一台需要开启黑阈的安卓手机 另一台安卓手机（支持OTG且有ROOT） 一根OTG线还有一根数据线。 如果你手机支持网络ADB调试，可直接开启黑阈新版本柳大已删除此操作 下载并安装所需工具 ADB工具安装器 终端模拟器 连接手机开启USB调试并连接手机 输入命令SUwget http://dl.qaq.fun/brevent.shchmod +x brevent.sh &amp;&amp; ./brevent.sh 如果给另一台手机开启黑阈，最好删除/sdcard/.Android目录或者重启后再执行 123456789mkdir -p /sdcard/.android /sdcard/.android/tmpcd /sdcard/.androidadb keygen adbkey &amp;&gt; /dev/nullexport HOME=/sdcardexport TMPDIR=/sdcard/.android/tmpadb kill-serveradb devicesadb -d wait-for-deviceadb -d shell sh /data/data/me.piebridge.brevent/brevent.sh","link":"/archives/brevent/"},{"title":"卸载iptables导致无法启动的修复措施","text":"论如何高雅卸载iptables（误） 某天，在折腾服务器的时候，LNMP MySQL的3306端口一直无法外网链接，排查了服务器面板安全策略组和端口监听，一气之下直接apt-get remove iptables卸载iptables，执行过后发现居然真能连上后，然后，然后服务器就GG了……… SSH连接没反应，用后台的VNC连上去后执行ifconfig，妈耶，列表就剩下一个孤零零的lo网卡……… 因为该操作会导致系统许多必要依赖组件被一起删掉，包括和网络相关的组件，所以在服务器断开ssh链接或者重启后，因为没有网卡配置信息而无法联网。 解决方案(误)在经过一番援交学习后总结出以下方案 删库跑路 开工单求攻城狮进行一场紧脏而又刺激的py交易 获取网络配置，VNC连上去重新设置网卡信息 关于具体网络配置，你可以发工单骚扰客服，也可以登录SolusVM/其他类似后台面板查找自己的网络配置 方法步骤VNC登录服务器后 1234567891011#设置网卡eth0以及IP地址和子网掩码ifconfig eth0 你的IP地址 netmask 你的子网掩码#设置网关route add default gw 你的网关#设置DNSecho &quot;nameserver 8.8.4.4nameserver 1.1.1.1&quot; &gt;&gt; /etc/resolv.conf 这时候，你会发现你的服务器能临时上网了，但重启后配置会恢复，这是我们只需要 12sudo apt-get updateapt-get install net-tools 来恢复network-manager 最后LNMP MySQL开启远程连接的正确姿势 MySQL/MariaDB无法远程连接，如何开启？为了安全LNMP默认是禁止远程连接的，开启方法：https://bbs.vpser.net/thread-13563-1-1.html","link":"/archives/iptables/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/archives/hello-world/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"AdSense","slug":"AdSense","link":"/tags/AdSense/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"SSL","slug":"SSL","link":"/tags/SSL/"},{"name":"AllinSSL","slug":"AllinSSL","link":"/tags/AllinSSL/"},{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"tools","slug":"tools","link":"/tags/tools/"},{"name":"Avicii","slug":"Avicii","link":"/tags/Avicii/"},{"name":"OTG","slug":"OTG","link":"/tags/OTG/"},{"name":"Brevent","slug":"Brevent","link":"/tags/Brevent/"},{"name":"CloudFlare","slug":"CloudFlare","link":"/tags/CloudFlare/"},{"name":"CloudFlare Spectrum","slug":"CloudFlare-Spectrum","link":"/tags/CloudFlare-Spectrum/"},{"name":"Coding","slug":"Coding","link":"/tags/Coding/"},{"name":"网盘","slug":"网盘","link":"/tags/%E7%BD%91%E7%9B%98/"},{"name":"图床","slug":"图床","link":"/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"OpenJDK","slug":"OpenJDK","link":"/tags/OpenJDK/"},{"name":"Debian 10","slug":"Debian-10","link":"/tags/Debian-10/"},{"name":"JRE","slug":"JRE","link":"/tags/JRE/"},{"name":"JDK","slug":"JDK","link":"/tags/JDK/"},{"name":"AdoptOpenJDK","slug":"AdoptOpenJDK","link":"/tags/AdoptOpenJDK/"},{"name":"静态","slug":"静态","link":"/tags/%E9%9D%99%E6%80%81/"},{"name":"托管","slug":"托管","link":"/tags/%E6%89%98%E7%AE%A1/"},{"name":"Typecho","slug":"Typecho","link":"/tags/Typecho/"},{"name":"ZEIT","slug":"ZEIT","link":"/tags/ZEIT/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"CI","slug":"CI","link":"/tags/CI/"},{"name":"iptables","slug":"iptables","link":"/tags/iptables/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Kernel","slug":"Kernel","link":"/tags/Kernel/"},{"name":"Debian","slug":"Debian","link":"/tags/Debian/"},{"name":"LNMP","slug":"LNMP","link":"/tags/LNMP/"},{"name":"LEMP","slug":"LEMP","link":"/tags/LEMP/"},{"name":"Magisk","slug":"Magisk","link":"/tags/Magisk/"},{"name":"Nodejs","slug":"Nodejs","link":"/tags/Nodejs/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"nvm","slug":"nvm","link":"/tags/nvm/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"rc.local","slug":"rc-local","link":"/tags/rc-local/"},{"name":"TCShare","slug":"TCShare","link":"/tags/TCShare/"},{"name":"ctyun","slug":"ctyun","link":"/tags/ctyun/"},{"name":"Valine","slug":"Valine","link":"/tags/Valine/"},{"name":"emoji","slug":"emoji","link":"/tags/emoji/"},{"name":"qqmail","slug":"qqmail","link":"/tags/qqmail/"},{"name":"Ward","slug":"Ward","link":"/tags/Ward/"},{"name":"404 page","slug":"404-page","link":"/tags/404-page/"},{"name":"vercel","slug":"vercel","link":"/tags/vercel/"},{"name":"ADGuard Home","slug":"ADGuard-Home","link":"/tags/ADGuard-Home/"},{"name":"DoH&#x2F;DoT","slug":"DoH-DoT","link":"/tags/DoH-DoT/"},{"name":"DNS","slug":"DNS","link":"/tags/DNS/"},{"name":"Windows Search","slug":"Windows-Search","link":"/tags/Windows-Search/"}],"categories":[{"name":"WebSite","slug":"WebSite","link":"/categories/WebSite/"},{"name":"Android","slug":"Android","link":"/categories/Android/"},{"name":"Music","slug":"Music","link":"/categories/Music/"},{"name":"Daily","slug":"Daily","link":"/categories/Daily/"},{"name":"Tools","slug":"Android/Tools","link":"/categories/Android/Tools/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"}]}